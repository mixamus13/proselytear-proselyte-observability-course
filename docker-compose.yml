services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - observability-net
    volumes:
      - grafana-storage:/var/lib/grafana
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka1
    hostname: kafka1
    ports:
      - "9092:9092"
    volumes:
      - kafka1_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - observability-net

  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka2
    hostname: kafka2
    ports:
      - "9093:9093"
    volumes:
      - kafka2_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9093", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - observability-net

  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka3
    hostname: kafka3
    ports:
      - "9094:9094"
    volumes:
      - kafka3_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9094", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - observability-net

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    ports:
      - "8081:8081"
    volumes:
      - schema_registry_data:/etc/schema-registry
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    depends_on:
      kafka1:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/subjects" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8070:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8080" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: events_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d events_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://user:password@postgres:5432/events_db?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9187/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    restart: unless-stopped
    command:
      - "--kafka.server=kafka1:9092"
      - "--kafka.server=kafka2:9093"
      - "--kafka.server=kafka3:9094"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9308/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5

  event-producer:
    image: event-producer:latest
    container_name: event-producer
    ports:
      - "8090:8090"
    build:
      context: ./event-producer
    environment:
      SPRING_PROFILES_ACTIVE: docker
      OTEL_SERVICE_NAME: event-producer
      OTEL_EXPORTER_OTLP_ENDPOINT: http://alloy:4318
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_METRICS_EXPORTER: none
      OTEL_TRACES_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: none
      OTEL_RESOURCE_ATTRIBUTES: service.version=1.0.0,deployment.environment=docker
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    networks:
      - observability-net

  event-consumer:
    image: event-consumer:latest
    container_name: event-consumer
    ports:
      - "8091:8091"
    build:
      context: ./event-consumer
    environment:
      SPRING_PROFILES_ACTIVE: docker
      OTEL_SERVICE_NAME: event-consumer
      OTEL_EXPORTER_OTLP_ENDPOINT: http://alloy:4318
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_METRICS_EXPORTER: none
      OTEL_TRACES_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: none
      OTEL_RESOURCE_ATTRIBUTES: service.version=1.0.0,deployment.environment=docker
    depends_on:
      postgres:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      event-producer:
        condition: service_started
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8091/actuator/health" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    user: "root"
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - loki_chunks:/tmp/loki/chunks
      - loki_index:/tmp/loki/index
      - loki_rules:/tmp/loki/rules
    networks:
      - observability-net

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    user: root
    ports:
      - "9080:9080"  # HTTP-интерфейс Alloy (по умолчанию)
      - "4317:4317"   # OTLP gRPC (важно!)
      - "4318:4318"   # OTLP HTTP (если нужен)
    volumes:
      - ./monitoring/alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
    environment:
      GRAFANA_LOKI_URL: http://loki:3100/loki/api/v1/push  # локальный Loki
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:9080
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    networks:
      - observability-net

  event-public-api:
    image: event-public-api:latest
    container_name: event-public-api
    ports:
      - "8092:8092"
    build:
      context: ./event-public-api
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EVENT_CONSUMER_URL: http://event-consumer:8091
      OTEL_EXPORTER_OTLP_ENDPOINT: http://alloy:4318
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_SERVICE_NAME: event-public-api
      OTEL_METRICS_EXPORTER: none
      OTEL_TRACES_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: none
      OTEL_RESOURCE_ATTRIBUTES: service.version=1.0.0,deployment.environment=docker
    depends_on:
      event-consumer:
        condition: service_healthy
    networks:
      - observability-net

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    command: [ "-config.file=/etc/tempo/tempo.yaml" ]
    volumes:
      - ./monitoring/tempo/tempo.yaml:/etc/tempo/tempo.yaml
      - tempo_data:/var/tempo
    depends_on:
      - create-tempo-bucket
    ports:
      - "3200:3200"
    networks:
      - observability-net

  minio:
    image: minio/minio:RELEASE.2024-05-28T17-19-04Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: tempo
      MINIO_ROOT_PASSWORD: tempo-tempo
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - observability-net

  create-tempo-bucket:
    image: minio/mc
    container_name: create-tempo-bucket
    entrypoint: >
      /bin/sh -c "
        sleep 10 && \
        mc alias set minio http://minio:9000 tempo tempo-tempo && \
        mc mb -p minio/tempo && \
        mc anonymous set download minio/tempo
      "
    depends_on:
      - minio
    networks:
      - observability-net

networks:
  observability-net:
    driver: bridge

volumes:
  remote-ubuntu-bin:
  grafana-storage:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  pg_data:
  schema_registry_data:
  loki_data:
  loki_chunks:
  loki_index:
  loki_rules:
  tempo_data:
  minio_data:
