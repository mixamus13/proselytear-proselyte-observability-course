services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - observability-net
    volumes:
      - grafana-storage:/var/lib/grafana
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka1
    hostname: kafka1
    ports:
      - "9092:9092"
    volumes:
      - kafka1_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - observability-net

  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka2
    hostname: kafka2
    ports:
      - "9093:9093"
    volumes:
      - kafka2_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9093", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - observability-net

  kafka3:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka3
    hostname: kafka3
    ports:
      - "9094:9094"
    volumes:
      - kafka3_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9094", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - observability-net

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    ports:
      - "8081:8081"
    volumes:
      - schema_registry_data:/etc/schema-registry
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    depends_on:
      kafka1:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/subjects" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8070:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8080" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: events_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d events_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://user:password@postgres:5432/events_db?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9187/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    ports:
      - "9308:9308"
    restart: unless-stopped
    command:
      - "--kafka.server=kafka1:9092"
      - "--kafka.server=kafka2:9093"
      - "--kafka.server=kafka3:9094"
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9308/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  observability-net:
    driver: bridge

volumes:
  remote-ubuntu-bin:
  grafana-storage:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  pg_data:
  schema_registry_data:
